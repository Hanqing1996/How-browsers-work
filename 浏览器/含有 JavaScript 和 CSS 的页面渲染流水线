![Alt](https://i.loli.net/2020/10/02/AkzTEwbdPo2Jmtv.jpg)

由于文件请求完毕的时机是不确定的，所以可能有两个空闲时间

1. 未接收到构建DOM树所需的HTML文件
2. 未接收到构建CSSDOM所需的css文件


####  CSSOM的作用

第一个是提供给 JavaScript 操作样式表的能力，第二个是为布局树的合成提供基础的样式信息


#### 含有 JavaScript 代码和 CSS 外链的页面渲染流水线

![Alt](https://i.loli.net/2020/10/02/76csQCajOXp18f4.jpg)


#### 含有 JavaScript 文件和 CSS 文件页面的渲染流水线

![Alt](https://i.loli.net/2020/10/02/fY7alExct4vhwSI.jpg)

从图中可以看出来，在接收到 HTML 数据之后的预解析过程中，HTML 预解析器识别出来了有 CSS 文件和 JavaScript 文件需要下载，然后就同时发起这两个文件的下载请求，需要注意的是，这两个文件的下载过程是重叠的，所以下载时间按照最久的那个文件来算。

#### 从发起 URL 请求开始，到首次显示页面的内容，在视觉上经历的三个阶段

1. 浏览器向渲染进程“提交文档”之前，这时页面展示出来的还是之前页面的内容。
2. 白屏时间，在这段时间内，做了以下事情：通过网络进程和渲染进程间的通道传输数据（下载 CSS、下载 JavaScript），解析 HTML、生成 CSSOM、执行 JavaScript、生成布局树，最后还要经过一系列的步骤准备首次渲染。注意渲染进程向浏览器进程“确认文档提交”发生在这个阶段。
3. 第三个阶段，等首次渲染完成之后，就开始进入完整页面的生成阶段了，然后页面会一点点被绘制出来。


#### 如何缩短白屏时间

我们来挨个分析这个阶段的主要任务，包括了解析 HTML、下载 CSS、下载 JavaScript、生成 CSSOM、执行 JavaScript、生成布局树、绘制页面一系列操作。

通常情况下的瓶颈主要体现在下载 CSS 文件、下载 JavaScript 文件和执行 JavaScript。

所以要想缩短白屏时长，可以有以下策略：

* 通过内联 JavaScript、内联 CSS 来移除这两种类型的文件下载，这样获取到 HTML 文件之后就可以直接开始渲染流程了。
* 但并不是所有的场合都适合内联，那么还可以尽量减少文件大小，比如通过 webpack 等工具移除一些不必要的注释，并压缩 JavaScript 文件。
* 还可以将一些不需要在解析 HTML 阶段使用的 JavaScript 标记上 async 或者 defer。
  对于大的 CSS 文件，可以通过媒体查询属性，将其拆分为多个不同用途的 CSS 文件，这样只有在特定的场景下才会加载特定的 CSS 文件。

